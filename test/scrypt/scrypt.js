import Test from "../test.js";
import Scrypt from "../../src/scrypt/scrypt.js";
import md5_str from "../../src/md5/md5_str.js";
import hmac from "../../src/scrypt/hmac.js"
import { new_array } from "../../src/utils.js";


const test = new Test();
const scrypt = new Scrypt();


test.fp = "/src/scrypt/hmac.js";
test.assert("9294727a3638bb1c13f48ef8158bfc9d", hmac, [
  md5_str, new_array(16, 0x0b), "Hi There", 64
]);
test.assert("750c783e6ab0b503eaa86e310a5db738", hmac, [
  md5_str, "Jefe", "what do ya want for nothing?", 64
]);
test.assert("56be34521d144c88dbb8c733f0e8b3f6", hmac, [
  md5_str, new_array(16, 0xAA), new_array(50, 0xDD), 64
]);


test.fp = "/src/scrypt/scrypt.js";
test.assert([
  0x219a877e, 0x86c93e4f, 0xe640a97c, 0x268f7141,
  0x5b55eeba, 0xb5c1618c, 0x1146f80d, 0x1d3bcd6d,
  0x19f324ee, 0x853d9bdf, 0x4b1e1214, 0x32aac55a,
  0x291d0276, 0x2948c709, 0x8dc6ebed, 0x5ec2b8b8,
].map(x=> x|0), scrypt.bytes_to_words, [[
  0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
  0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
  0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
  0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29, 0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e,
]], scrypt);

test.assert([
  0x9c851fa4, 0x99cc0866, 0xcbca813b, 0x05ef0c02,
  0x81214b04, 0x7d33fda2, 0x631c7bfd, 0x292f6896,
  0x683139b4, 0xbce6c9e3, 0xb7c56bfe, 0xba966da0,
  0x10cc24e4, 0x5c74912c, 0x3d67ad24, 0x818f61c7,
].map(x=> x|0), scrypt.salsa, [[
  0x219a877e, 0x86c93e4f, 0xe640a97c, 0x268f7141,
  0x5b55eeba, 0xb5c1618c, 0x1146f80d, 0x1d3bcd6d,
  0x19f324ee, 0x853d9bdf, 0x4b1e1214, 0x32aac55a,
  0x291d0276, 0x2948c709, 0x8dc6ebed, 0x5ec2b8b8,
], []], scrypt);

test.assert([
  0x9c851fa4, 0x99cc0866, 0xcbca813b, 0x05ef0c02,
  0x81214b04, 0x7d33fda2, 0x631c7bfd, 0x292f6896,
  0x683139b4, 0xbce6c9e3, 0xb7c56bfe, 0xba966da0,
  0x10cc24e4, 0x5c74912c, 0x3d67ad24, 0x818f61c7,
  0x75c9ed20, 0xa8813832, 0x4cf64005, 0x3ccd2d16,
  0xfe7c0721, 0xe25f8d5f, 0x8f16a4b1, 0xb7783695,
  0x803d3b7d, 0xabe4603b, 0xe5960992, 0xb6534d9b,
  0x58222a5d, 0xf5edd577, 0xf1b92c84, 0x25e4ef4e,
].map(x=> x|0), scrypt.block_mix, [[
  0x650bcef7, 0xa4722d3d, 0xabf58c10, 0xddff12e9,
  0xdb167677, 0x0ea727bb, 0xaef30482, 0xad6f0f2d,
  0x488ff689, 0x7be8d111, 0x40d73bcc, 0x29fd9f0a,
  0x84014f09, 0xf3749563, 0x31a1e59a, 0xd7bc1752,
  0x44914989, 0x22bb1372, 0x4db5256c, 0xfb7063a8,
  0x804398cd, 0xbb664637, 0xbfb5fc8f, 0xb054c240,
  0x517cd267, 0xfed54ace, 0x0bc929d8, 0x1b575a50,
  0xad1c4d7f, 0xda3c526a, 0xbc670e77, 0x897eafea,
], 1], scrypt);

test.assert([
  0x93c1cc79, 0xcaeb9d62, 0x700b7f04, 0xb6f64b60,
  0x4adde32c, 0x55e32696, 0x9861fcfa, 0x462beae6,
  0x671384d5, 0x29b0993b, 0x57c365d6, 0x26b41f60,
  0xbbf4b2a0, 0x9fee00a2, 0x9bd1430a, 0x719c1a57,
  0xe64211ef, 0x6f265a5d, 0x2c83cadd, 0x7caa9fe5,
  0xf19c0bac, 0xcaff2bbe, 0xee010d30, 0xc4197638,
  0x44fd12ae, 0xa003f238, 0x7ec4e1e4, 0x1f8614c3,
  0xcb87904e, 0x686a3933, 0xd2f9e873, 0x8e4b9a53,
].map(x=> x|0), scrypt.ro_mix, [[
  0x650bcef7, 0xa4722d3d, 0xabf58c10, 0xddff12e9,
  0xdb167677, 0x0ea727bb, 0xaef30482, 0xad6f0f2d,
  0x488ff689, 0x7be8d111, 0x40d73bcc, 0x29fd9f0a,
  0x84014f09, 0xf3749563, 0x31a1e59a, 0xd7bc1752,
  0x44914989, 0x22bb1372, 0x4db5256c, 0xfb7063a8,
  0x804398cd, 0xbb664637, 0xbfb5fc8f, 0xb054c240,
  0x517cd267, 0xfed54ace, 0x0bc929d8, 0x1b575a50,
  0xad1c4d7f, 0xda3c526a, 0xbc670e77, 0x897eafea,
], 1, 16], scrypt);

test.assert([
  0x55, 0xac, 0x04, 0x6e, 0x56, 0xe3, 0x08, 0x9f, 
  0xec, 0x16, 0x91, 0xc2, 0x25, 0x44, 0xb6, 0x05,
  0xf9, 0x41, 0x85, 0x21, 0x6d, 0xde, 0x04, 0x65, 
  0xe6, 0x8b, 0x9d, 0x57, 0xc2, 0x0d, 0xac, 0xbc,
  0x49, 0xca, 0x9c, 0xcc, 0xf1, 0x79, 0xb6, 0x45, 
  0x99, 0x16, 0x64, 0xb3, 0x9d, 0x77, 0xef, 0x31,
  0x7c, 0x71, 0xb8, 0x45, 0xb1, 0xe3, 0x0b, 0xd5, 
  0x09, 0x11, 0x20, 0x41, 0xd3, 0xa1, 0x97, 0x83,
], scrypt.PBKDF2_HMAC_SHA256, [
  "passwd", "salt", 1, 64
], scrypt);

test.assert([
  0x2d, 0x41, 0x2f, 0x89, 0x6e, 0x76, 0x68, 0x5e,
  0x30, 0xdf, 0x56, 0x9f, 0x0a, 0x74, 0x06, 0x34,
  0xe3, 0x1f, 0x03, 0x1f, 0x74, 0x9d, 0x60, 0x7d,
  0x9e, 0x44, 0x21, 0x0b, 0xff, 0xb9, 0x1a, 0x6a,
  0xb6, 0x70, 0xf5, 0x00, 0xc7, 0x88, 0x62, 0x00,
  0x19, 0x59, 0xf7, 0xd7, 0xb9, 0xf9, 0x6a, 0xfb,
  0x36, 0x05, 0x70, 0x02, 0x98, 0xac, 0xb1, 0x44,
  0x27, 0xe0, 0x23, 0x94, 0x63, 0xc6, 0x6f, 0x20,
], scrypt.PBKDF2_HMAC_SHA256, [
  "passwd", "salt", 2, 64
], scrypt);

test.assert([
  0xb8, 0x3a, 0x7b, 0x22, 0x09, 0x1b, 0xf1, 0x15,
  0x15, 0x55, 0xed, 0x6a, 0x24, 0x11, 0x8e, 0x4b,
  0x43, 0xeb, 0xcd, 0x1c, 0x32, 0x10, 0xa0, 0x48,
  0xc2, 0xb6, 0x8d, 0x09, 0x3a, 0xa1, 0x2c, 0xa4,
  0x50, 0xe6, 0xf2, 0x59, 0x97, 0x59, 0xf8, 0x4b,
  0x30, 0xaf, 0x46, 0xfd, 0xf8, 0x08, 0x39, 0x1a,
  0x8d, 0x28, 0xa7, 0x3c, 0xe9, 0xac, 0xd1, 0x6c,
  0xc7, 0xcc, 0x0d, 0x9d, 0x93, 0xf0, 0x04, 0x60,
], scrypt.PBKDF2_HMAC_SHA256, [
  "passwd", "NaCl", 80, 64
], scrypt);

test.assert([
  0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 
  0x3b, 0x19, 0xca, 0x42, 0xc1, 0x8a, 0x04, 0x97,
  0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8, 
  0xdf, 0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42,
  0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48, 0xf8, 
  0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17,
  0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28, 
  0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06,
], scrypt.scrypt, [
  "", "", 16, 1, 1, 64
], scrypt);

test.assert([
  0xae, 0xc6, 0xb7, 0x48, 0x3e, 0xd2, 0x6e, 0x08, 
  0x80, 0x2b, 0x41, 0xf4, 0x03, 0x20, 0x86, 0xa0, 
  0xe8, 0x86, 0xbe, 0x7a, 0xc4, 0x8f, 0xcf, 0xd9, 
  0x2f, 0xf0, 0xce, 0xf8, 0x10, 0x97, 0x52, 0xf4, 
  0xac, 0x74, 0xb0, 0x77, 0x26, 0x32, 0x56, 0xa6, 
  0x5a, 0x99, 0x70, 0x1b, 0x7a, 0x30, 0x4d, 0x46, 
  0x61, 0x1c, 0x8a, 0xa3, 0x91, 0xe7, 0x99, 0xce, 
  0x10, 0xa2, 0x77, 0x53, 0xe7, 0xe9, 0xc0, 0x9a,
], scrypt.scrypt, [
  "password", "NaCl", 16, 1, 1, 64
], scrypt);

test.assert([
  0xed, 0x94, 0xfb, 0xc4, 0x90, 0xc4, 0xc8, 0xc4, 
  0x9c, 0x35, 0xb7, 0xbd, 0x50, 0x1b, 0xea, 0xdb, 
  0x38, 0xa9, 0xbd, 0x62, 0x7c, 0xea, 0x70, 0xbb, 
  0xb0, 0x10, 0x94, 0xa1, 0x3a, 0x41, 0x62, 0xe4, 
  0x89, 0xd7, 0x32, 0x0c, 0xd6, 0xc6, 0xdc, 0xce, 
  0x36, 0x52, 0x63, 0xe7, 0x03, 0x67, 0xdf, 0x1c, 
  0x86, 0x74, 0x87, 0x45, 0x63, 0x2d, 0xea, 0x36, 
  0x7f, 0xdb, 0xe1, 0xe2, 0xa3, 0x5b, 0xc5, 0x16,
], scrypt.scrypt, [
  "password", "NaCl", 2, 2, 1, 64
], scrypt);

test.assert([
  0x69, 0x6f, 0xd5, 0x2c, 0x8c, 0xec, 0x83, 0x0c,
  0x2d, 0xe2, 0xe0, 0xf0, 0x16, 0xb0, 0xdf, 0xcb,
  0xe9, 0xab, 0x55, 0xe0, 0x72, 0xc7, 0x54, 0xd5,
  0x6f, 0xb9, 0x23, 0x0a, 0x75, 0x2c, 0x5f, 0xaf,
  0x4f, 0xd9, 0x14, 0xa4, 0xed, 0xad, 0x8c, 0x50,
  0x8d, 0x0d, 0x35, 0x04, 0x0a, 0xad, 0x8e, 0x8b,
  0x77, 0x95, 0x69, 0x89, 0x98, 0xd9, 0xc2, 0x15,
  0x05, 0xea, 0xea, 0x18, 0x8d, 0xaf, 0xde, 0x7a,
], scrypt.scrypt, [
  "password", "NaCl", 16, 2, 1, 64
], scrypt);

test.assert([
  0x80, 0xa5, 0x4a, 0x79, 0x8d, 0xfc, 0x8f, 0xbb,
  0xa7, 0x44, 0xf2, 0x93, 0xab, 0x04, 0x29, 0x20,
  0x1f, 0xc0, 0x0b, 0x3a, 0x78, 0x5c, 0xe8, 0x35,
  0x79, 0x4b, 0xc4, 0xbd, 0xf4, 0xa8, 0x06, 0x81,
  0xb1, 0x02, 0x52, 0xbc, 0x97, 0x72, 0x67, 0x17,
  0x46, 0xec, 0xf4, 0x7b, 0x8f, 0x02, 0x2d, 0x69,
  0x71, 0xf7, 0x68, 0x4d, 0xfc, 0x56, 0x45, 0xaf,
  0xdd, 0x52, 0x70, 0xbe, 0x4f, 0x4a, 0xba, 0xe9,
], scrypt.scrypt, [
  "password", "NaCl", 16, 2, 2, 64
], scrypt);


console.log(import.meta.url.replace(/^.*front_hash/, ''), " 测试完毕\n");
